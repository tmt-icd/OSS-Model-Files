subsystem = OSS
component = oss_assembly

publish {

  // --- Events ---

  events = [

    // --- OSS PLC State Event ---

    {
      name = plcStateEvent
      requirements = [ICD-OSS-ESW-0100]
      maxRate = 1
      description = """
      A PLC state event for each PLC (the GSC and all LSCs).

      This event is published periodically to allow higher level software a measure of the
      integrity of the connection to the OSS and the integrity of the OSS system.

      _Note: the intent of this event is to notify the state of GSC and all LSCs in one event. However,
      [TMT Interface Database System version 2.2.0](https://github.com/tmtsoftware/icd/releases/tag/v2.2.0)
      removed the support of "struct" data type and there is currently no efficient way to represent the
      event data structure that includes the state of GSC and all LSCs (keep in mind that the number of
      LSCs will be grown when a new subsystem/instrument is added). The data structure definition
      below represents the state of one GSC/LSC for now, but the real intent is to have an array of
      this data strcuture._
      """
      attributes = [
        {
          name = plcName
          description = "Indicates the PLC this event refers to"
          type = string
        }
        {
          name = plcFault
          description = "A PLC error occurred"
          type = string
        }
        {
          name = plcModuleCommunicationFault
          description = "A module communicatiom error occurred"
          type = string
        }
        {
          name = plcCommunicationFault
          description = "A communicatiom error occurred"
          type = string
        }
        {
          name = lscMode
          description = """
          Current mode of the subsystem LSC.

          Modes are configurations of the subsystem LSC where the system is behaving
          normally but some interlocks have been lifted making the system less safe than usual. This is a
          design feature to allow certain necessary maintenance operations.
          """
          type = string
        }
      ]
    }

    // --- SRCF Status Events ---

    {
      name = srcfStatusEvent
      requirements = [ICD-OSS-ESW-0110]
      description = """
      An SRCF event for every SRCF message of each PLC (the GSC and all LSCs).

      Each OSS PLC manages one or more SRCFs, which are related to one or more
      lower level interlocks. Each SRCF event contains a Boolean for each possible fault that
      contributes to the SRCF. The parameters of each SRCF depend on the specific SRCF.

      This information is used by ESW to provide OSS monitoring and provides an easy
      way to see if any portion of the OSS has entered a safe state.

      _Note: the intent of this event is to notify the state of all SRCFs in one event. However,
      [TMT Interface Database System version 2.2.0](https://github.com/tmtsoftware/icd/releases/tag/v2.2.0)
      removed the support of "struct" data type and there is currently no efficient way to represent the
      event data structure that includes the state of all SRCFs (keep in mind that a new SRCF may be
      added in the future). The data structure definition below represents the state of one
      SRCF for now, but the real intent is to have an array of this data strcuture._
      """
      attributes = [
        {
          name = srcfName
          description = "Description of SRCF"
          type = string
        }
        {
          name = activated
          description = "Indicates whether this SRCF is activated (interlocked) or not."
          type = boolean
        }
        {
          name = faultReason
          description = "Description of fault"
          type = string
        }
      ]
    }

    // --- Access Control Event ---

    {
      name = accessControlArea
      requirements = [ICD-OSS-ESW-0120]
      description = """
      This event includes the gate status of the protected areas.

      This information is used by ESW to provide OSS monitoring and gives a level of
      situational awareness.

      _Note: the intent of this event is to notify the state of all gated access areas in one event. However,
      [TMT Interface Database System version 2.2.0](https://github.com/tmtsoftware/icd/releases/tag/v2.2.0)
      removed the support of "struct" data type and there is currently no efficient way to represent the
      event data structure that includes the state of all access areas (keep in mind that a new access
      area may be added in the future). The data structure definition below represents the state of one
      access area for now, but the real intent is to have an array of this data strcuture._
      """
      attributes = [
        {
          name = accessAreaName
          description = "The name of the access area."
          type = string
        }
        {
          name = gateOpen
          description = "Indicates whether an indivisual gate of the access area is open or not."
          type = array
          items = {
            type = boolean
          }
        }
        {
          name = gateLocked
          description = "Indicates whether an indivisual gate of the access area is locked or not."
          type = array
          items = {
            type = boolean
          }
        }
        {
          name = gateInEmergencyEgressState
          description = "Indicates whether an indivisual gate is in the emergency egress state or not."
          type = array
          items = {
            type = boolean
          }
        }
      ]
    }

    {
      name = keyExchangeUnit
      requirements = [ICD-OSS-ESW-0120]
      description = """
      This event includes the status of master keys, intermediate keys and/or personnel keys in each
      key exchange unit.

      This information is used by ESW to provide OSS monitoring and gives a level of
      situational awareness.

      _Note: the intent of this event is to notify the state of all key slots in one event. However,
      [TMT Interface Database System version 2.2.0](https://github.com/tmtsoftware/icd/releases/tag/v2.2.0)
      removed the support of "struct" data type and there is currently no efficient way to represent the
      state of all keys slots grouped by key exchange units. The data structure definition below represents
      the state of one key exchange unit for now, but the real intent is to have an array of this data strcuture._
      """
      attributes = [
        {
          name = keyExchangeUnitName
          description = "The name of the key exchange unit."
          type = string
        }
        {
          name = keyName
          description = "Names of individual key slots in the key exchange unit."
          type = array
          items = {
            type = string
          }
        }
        {
          name = keyInserted
          description = "Indicates whether an indivisual key is inserted to the key exchange unit."
          type = array
          items = {
            type = boolean
          }
        }
      ]
    }
    {
      name = azimuthWalkway
      requirements = [ICD-OSS-ESW-0120]
      description = """
      The OSS is responsible for handling the card readers of the controlled-access azimuth walkway.
      This event includes the status of that access control area based on the information provided
      by the card readers. The details of the data structure of this event is currently TBD.

      This information is used by ESW to provide OSS monitoring and gives a level of
      situational awareness.
      """
      attributes = [
      ]
    }
  ]
}



